{
  "info": {
    "name": "PeerVault API Collection",
    "description": "Comprehensive API testing collection for PeerVault",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "mockUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "System Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "status"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.collectionVariables.set('authToken', response.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"testpass\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "REST API",
      "item": [
        {
          "name": "Create Node",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"test-node\",\n  \"description\": \"Test node for API testing\",\n  \"config\": {\n    \"port\": 3000,\n    \"enableAPIs\": true\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/nodes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "nodes"]
            }
          },
          "response": []
        },
        {
          "name": "Get Nodes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/nodes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "nodes"]
            }
          },
          "response": []
        },
        {
          "name": "Get Node by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/nodes/{{nodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "nodes", "{{nodeId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "GraphQL API",
      "item": [
        {
          "name": "GraphQL Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query { nodes { id name status } }\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            }
          },
          "response": []
        },
        {
          "name": "GraphQL Mutation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation { createNode(input: { name: \\\"test-node\\\" }) { id name } }\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/graphql",
              "host": ["{{baseUrl}}"],
              "path": ["graphql"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "gRPC API",
      "item": [
        {
          "name": "gRPC Health Check",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/grpc"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/grpc/health",
              "host": ["{{baseUrl}}"],
              "path": ["grpc", "health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Mock Server",
      "item": [
        {
          "name": "Mock Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mockUrl}}/health",
              "host": ["{{mockUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "Mock Analytics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mockUrl}}/analytics",
              "host": ["{{mockUrl}}"],
              "path": ["analytics"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Load Test - Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "Load Test - API Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "status"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for requests",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test assertions",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.have.jsonBody();",
          "});",
          "",
          "// Log response for debugging",
          "console.log('Response:', pm.response.json());"
        ]
      }
    }
  ]
}
