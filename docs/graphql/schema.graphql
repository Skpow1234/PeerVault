# PeerVault GraphQL Schema
# This is the actual schema implemented in the PeerVault GraphQL API

scalar Time
scalar Upload

type Query {
  # File operations
  file(key: String!): File
  files(limit: Int, offset: Int, filter: FileFilter): [File!]!
  fileMetadata(key: String!): FileMetadata
  
  # Node and peer operations
  node(id: ID!): Node
  nodes: [Node!]!
  peerNetwork: PeerNetwork!
  
  # System monitoring
  systemMetrics: SystemMetrics!
  performanceStats: PerformanceMetrics!
  storageStats: StorageMetrics!
  
  # Health checks
  health: HealthStatus!
}

type Mutation {
  # File operations
  uploadFile(file: Upload!, key: String, metadata: FileMetadataInput): FileUpload!
  deleteFile(key: String!): Boolean!
  updateFileMetadata(key: String!, metadata: FileMetadataInput!): FileMetadata!
  
  # Node operations
  addPeer(address: String!, port: Int!): Node!
  removePeer(id: ID!): Boolean!
  
  # System operations
  updateConfiguration(config: ConfigurationInput!): Boolean!
}

type Subscription {
  # Real-time file events
  fileUploaded: File!
  fileDeleted: String!
  fileUpdated: File!
  
  # Real-time peer events
  peerConnected: Node!
  peerDisconnected: Node!
  peerHealthChanged: NodeHealth!
  
  # Real-time system events
  systemMetricsUpdated: SystemMetrics!
  performanceAlert: PerformanceAlert!
}

# File Types
type File {
  id: ID!
  key: String!
  hashedKey: String!
  size: Int!
  createdAt: Time!
  updatedAt: Time!
  owner: Node!
  replicas: [FileReplica!]!
  metadata: FileMetadata
}

type FileMetadata {
  contentType: String
  checksum: String
  tags: [String!]
  customFields: String
}

type FileReplica {
  node: Node!
  status: ReplicaStatus!
  lastSync: Time
  size: Int
}

type FileUpload {
  id: ID!
  key: String!
  size: Int!
  status: UploadStatus!
  progress: Float
  uploadedAt: Time
  replicas: [FileReplica!]
}

# Node and Peer Types
type Node {
  id: ID!
  address: String!
  port: Int!
  status: NodeStatus!
  lastSeen: Time
  health: NodeHealth
  capabilities: [String!]
}

type NodeHealth {
  isHealthy: Boolean!
  lastHeartbeat: Time
  responseTime: Float
  uptime: Float
  errors: [String!]
}

type PeerNetwork {
  nodes: [Node!]!
  connections: [Connection!]!
  topology: NetworkTopology
}

type Connection {
  from: Node!
  to: Node!
  status: ConnectionStatus!
  latency: Float
  bandwidth: Float
  lastActivity: Time
}

type NetworkTopology {
  totalNodes: Int!
  connectedNodes: Int!
  averageLatency: Float
  networkDiameter: Int
  clusters: [Cluster!]
}

type Cluster {
  id: ID!
  nodes: [Node!]!
  leader: Node
  size: Int!
}

# System Types
type SystemMetrics {
  storage: StorageMetrics!
  network: NetworkMetrics!
  performance: PerformanceMetrics!
  uptime: Float!
}

type StorageMetrics {
  totalSpace: Int!
  usedSpace: Int!
  availableSpace: Int!
  fileCount: Int!
  replicationFactor: Float
}

type NetworkMetrics {
  activeConnections: Int!
  totalBytesTransferred: Int!
  averageBandwidth: Float
  errorRate: Float
}

type PerformanceMetrics {
  averageResponseTime: Float
  requestsPerSecond: Float
  errorRate: Float
  memoryUsage: Float
  cpuUsage: Float
}

type HealthStatus {
  status: String!
  timestamp: Time!
  details: String
}

type PerformanceAlert {
  type: AlertType!
  message: String!
  severity: AlertSeverity!
  timestamp: Time!
  metrics: PerformanceMetrics
}

# Enums
enum ReplicaStatus {
  SYNCED
  SYNCING
  FAILED
  PENDING
}

enum NodeStatus {
  ONLINE
  OFFLINE
  DEGRADED
  UNKNOWN
}

enum ConnectionStatus {
  ACTIVE
  INACTIVE
  FAILED
  PENDING
}

enum UploadStatus {
  PENDING
  UPLOADING
  REPLICATING
  COMPLETED
  FAILED
}

enum AlertType {
  HIGH_CPU
  HIGH_MEMORY
  SLOW_RESPONSE
  NETWORK_ERROR
  STORAGE_FULL
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

# Input Types
input FileFilter {
  owner: ID
  sizeMin: Int
  sizeMax: Int
  createdAtAfter: Time
  createdAtBefore: Time
  tags: [String!]
}

input FileMetadataInput {
  contentType: String
  tags: [String!]
  customFields: String
}

input ConfigurationInput {
  storageRoot: String
  replicationFactor: Int
  maxFileSize: Int
  encryptionEnabled: Boolean
}

# Example Queries

"""
# Get file with metadata and replica information
query GetFile($key: String!) {
  file(key: $key) {
    id
    key
    hashedKey
    size
    createdAt
    updatedAt
    owner {
      id
      address
      port
      status
    }
    metadata {
      contentType
      checksum
      tags
    }
    replicas {
      node {
        id
        address
        status
      }
      status
      lastSync
      size
    }
  }
}

# Get peer network topology
query GetPeerNetwork {
  peerNetwork {
    nodes {
      id
      address
      port
      status
      health {
        isHealthy
        lastHeartbeat
        responseTime
      }
    }
    connections {
      from { id address }
      to { id address }
      status
      latency
      bandwidth
    }
    topology {
      totalNodes
      connectedNodes
      averageLatency
      networkDiameter
    }
  }
}

# Get system performance metrics
query SystemPerformance {
  systemMetrics {
    storage {
      totalSpace
      usedSpace
      availableSpace
      fileCount
      replicationFactor
    }
    network {
      activeConnections
      totalBytesTransferred
      averageBandwidth
      errorRate
    }
    performance {
      averageResponseTime
      requestsPerSecond
      errorRate
      memoryUsage
      cpuUsage
    }
    uptime
  }
}

# Subscribe to real-time file operations
subscription FileOperations {
  fileUploaded {
    id
    key
    size
    createdAt
    owner {
      id
      address
    }
  }
}

# Subscribe to peer health changes
subscription PeerHealth {
  peerHealthChanged {
    isHealthy
    lastHeartbeat
    responseTime
    errors
  }
}

# Subscribe to system metrics updates
subscription SystemMetrics {
  systemMetricsUpdated {
    storage {
      usedSpace
      fileCount
    }
    network {
      activeConnections
      totalBytesTransferred
    }
    performance {
      averageResponseTime
      memoryUsage
    }
  }
}
"""
